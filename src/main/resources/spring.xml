<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--扫描组件（除控制层）-->
    <context:component-scan base-package="com.fantasque.artcommunity">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--引入jdbc.properties-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--配置数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--
        开启事务的注解驱动
        将使用注解@Transactional标识的方法或类中所有的方法进行事务管理
    -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!--配置SqlSessionFactoryBean，可以直接在Spring的IOC中获取SqlSessionFactory-->
    <bean class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
        <!--设置MyBatis的核心配置文件的路径-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--设置数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!--设置类型别名所对应的包-->
        <!--<property name="typeAliasesPackage" value="com.fantasque.artcommunity.entity"/>-->
        <property name="typeAliasesPackage" value="com.fantasque.artcommunity.entity"/>
        <!--设置映射文件的路径，只有映射文件的包和mapper接口的包不一致时需要设置-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        <!--配置插件-->
        <property name="plugins">
            <array>
                <ref bean="mybatisPlusInterceptor"></ref>
            </array>
        </property>
    </bean>

    <!--配置MyBatis-Plus插件-->
    <bean id="mybatisPlusInterceptor"
          class="com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor">
        <property name="interceptors">
            <list>
                <ref bean="paginationInnerInterceptor"></ref>
            </list>
        </property>
    </bean>
    <!--配置MyBatis-Plus分页插件的bean-->
    <bean id="paginationInnerInterceptor"
          class="com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor">
    <!--设置数据库类型-->
    <property name="dbType" value="MYSQL"></property>
    </bean>

    <!--
        配置mapper接口的扫描，可以将指定包下所有的mapper接口
        通过SqlSession创建代理实现类对象，并将这些对象交给IOC容器管理
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.fantasque.artcommunity.mapper"/>
    </bean>

    <!--<bean class="com.fantasque.artcommunity.config.ShiroConfig"/>-->



    <!--&lt;!&ndash; 使用shiro安全检查注解 &ndash;&gt;-->
    <!--<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor" />-->

    <!--<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">-->
    <!--    <property name="securityManager" ref="securityManager" />-->
    <!--</bean>-->
    <!--&lt;!&ndash; shiro的生命周期处理器 &ndash;&gt;-->
    <!--<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />-->

    <!--&lt;!&ndash; shiro自带的密码匹配器（用来校验密码足够了） &ndash;&gt;-->
    <!--<bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">-->
    <!--    <property name="hashAlgorithmName" value="md5"/>-->
    <!--    <property name="hashIterations" value="1024"/>-->
    <!--</bean>-->
    <!--&lt;!&ndash; security datasource: &ndash;&gt;-->
    <!--<bean id="userRealm" class="com.fantasque.artcommunity.realm.UserRealm">-->
    <!--    <property name="credentialsMatcher" ref="credentialsMatcher"/>&lt;!&ndash; 密码匹配器 &ndash;&gt;-->
    <!--    <property name="cachingEnabled" value="false"/>&lt;!&ndash; 禁止缓存 &ndash;&gt;-->
    <!--</bean>-->
    <!--&lt;!&ndash; 安全管理器 &ndash;&gt;-->
    <!--<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">-->
    <!--    <property name="realm" ref="userRealm" />-->
    <!--</bean>-->
    <!--&lt;!&ndash; shiro过滤器 &ndash;&gt;-->
    <!--<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">-->
    <!--    &lt;!&ndash; 配置安全管理器 &ndash;&gt;-->
    <!--    <property name="securityManager" ref="securityManager" />-->
    <!--    &lt;!&ndash;&lt;!&ndash; 身份认证失败跳转的地址 &ndash;&gt;&ndash;&gt;-->
    <!--    &lt;!&ndash;<property name="loginUrl" value="/login/" />&ndash;&gt;-->
    <!--    &lt;!&ndash;&lt;!&ndash; 身份认证成功跳转的地址 &ndash;&gt;&ndash;&gt;-->
    <!--    &lt;!&ndash;<property name="successUrl" value="/" />&ndash;&gt;-->
    <!--    &lt;!&ndash;&lt;!&ndash; 权限认证失败跳转的地址 &ndash;&gt;&ndash;&gt;-->
    <!--    &lt;!&ndash;<property name="unauthorizedUrl" value="/login/unauthorized" />&ndash;&gt;-->

    <!--    <property name="filterChainDefinitions">-->
    <!--        &lt;!&ndash;anon 表示匿名访问，不需要认证以及授权 &ndash;&gt;-->
    <!--        &lt;!&ndash;authc表示需要认证 没有进行身份认证是不能进行访问的 &ndash;&gt;-->
    <!--        &lt;!&ndash;authc，roles[admin]表示是admin角色的用户才能访问 &ndash;&gt;-->
    <!--        <value>-->
    <!--            /static/** = anon-->
    <!--            /login/** = anon-->
    <!--            /common/** = anon-->
    <!--            /admin/** = authc,roles[admin]-->
    <!--            /* = authc-->
    <!--            /** = authc-->
    <!--        </value>-->
    <!--    </property>-->
    <!--</bean>-->
</beans>